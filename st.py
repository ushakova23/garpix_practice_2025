import os
import json
import joblib
import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±–ª–æ–∫–µ try-except –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ Streamlit Cloud
try:
    from src.wildbox_client import get_brand_details, get_product_details, get_warehouse_positions
    from src.wb_ranking_model import WBRankingModel
except ImportError:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã `wildbox_client.py` –∏ `wb_ranking_model.py` –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ `src/`.")
    st.stop()


def prepare_model_input(product_context, product_details, brand_details, city, search_query):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å, –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –º–æ–¥–µ–ª–∏."""
    subject_info = product_details.get("subject", {})
    data_dict = {
        "product_id": product_context.get("id"),
        "brand_id": product_details.get("brand", {}).get("id"),
        "category": subject_info.get("name") if isinstance(subject_info, dict) else None,
        "search_query": search_query,
        "city_of_search": city,
        "position": product_context.get("expected_position"),
        "proceeds": product_details.get("proceeds"),
        "delivery_efficiency_wh_avg_pos": float(product_context.get("wh_avg_position", 0) or 0),
        "in_promo": bool(product_details.get("promos")),
        "price": product_details.get("price"),
        "discount": product_details.get("discount"),
        "product_rating": product_details.get("rating"),
        "seller_rating": brand_details.get("rating"),
        "reviews_count": brand_details.get("reviews"),
        "quantity": product_details.get("quantity"),
        "lost_proceeds": product_details.get("lost_proceeds"),
        "images_count": len(product_details.get("images", [])),
        "product_name": product_details.get("name", "")
    }
    temp_df = pd.DataFrame([data_dict]).fillna(0)
    temp_df["is_discounted"] = (temp_df["discount"] > 0).astype(int)
    temp_df["price_per_rating"] = ((temp_df["price"] / temp_df["product_rating"].replace(0, 1))).fillna(0)
    return temp_df.iloc[0].to_dict()


def calculate_constructor_score(product_data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç 0 –¥–æ 100)."""
    score = 0
    if isinstance(product_data.get("description", ""), str) and len(product_data.get("description", "")) > 500:
        score += 30
    if product_data.get("images_count", 0) >= 6:
        score += 30
    if len(str(product_data.get("product_name", "")).split()) >= 5:
        score += 25
    if product_data.get("category"):
        score += 15
    return min(100, score)


def calculate_ranking_factors(current_data):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–æ—Ç 0 –¥–æ 100).
    –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100].
    """
    factors = {}
    
    # –¶–µ–Ω–∞ –∏ –°–∫–∏–¥–∫–∏
    discount_score = 50 if current_data.get("is_discounted") else 0
    discount_score += min(50, (current_data.get("discount", 0) / 30.0) * 50)
    factors["–¶–µ–Ω–∞ –∏ —Å–∫–∏–¥–∫–∏"] = discount_score

    # –ü—Ä–æ–¥–∞–∂–∏ –∏ –æ–±–æ—Ä–æ—Ç (—à–∫–∞–ª–∞ –¥–æ 250,000 —Ä—É–±/–º–µ—Å)
    factors["–ü—Ä–æ–¥–∞–∂–∏ –∏ –æ–±–æ—Ä–æ—Ç"] = min(100, (current_data.get("proceeds", 0) / 250000.0) * 100)

    # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã
    rating_score = (current_data.get("product_rating", 0) / 5.0) * 40
    rating_score += (current_data.get("seller_rating", 0) / 5.0) * 30
    rating_score += min(30, (current_data.get("reviews_count", 0) / 100.0) * 30)
    factors["–†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã"] = rating_score

    # –ö–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏
    factors["–ö–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏"] = calculate_constructor_score(current_data)

    # –î–æ—Å—Ç–∞–≤–∫–∞ (—à–∫–∞–ª–∞ –æ—Ç 24 –¥–æ 96 —á–∞—Å–æ–≤)
    delivery_hours = current_data.get("delivery_efficiency_wh_avg_pos", 96)
    delivery_score = 100 - ((delivery_hours - 24) / 72.0) * 100
    factors["–î–æ—Å—Ç–∞–≤–∫–∞"] = delivery_score
    
    # –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ (—à–∫–∞–ª–∞ –¥–æ 500 —à—Ç)
    factors["–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ"] = min(100, (current_data.get("quantity", 0) / 500.0) * 100)

    # === –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ===
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã [0, 100]
    for key in factors:
        factors[key] = max(0, min(100, factors[key]))

    return factors


def generate_optimization_recommendations(current_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞."""
    recommendations = []
    
    if current_data.get("discount", 0) < 15 and current_data.get("price", 0) > 0:
        recommendations.append({"factor": "–£—Å–∏–ª–∏—Ç—å –∞–∫—Ü–∏—é", "improvement": "–£–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–∏–¥–∫—É –¥–æ 20-25%", "position_change": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –±—É—Å—Ç", "revenue_change": "–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", "cost": f"~{int(current_data['price'] * 0.1):,}‚ÇΩ –¥–æ–ø. —Å –µ–¥–∏–Ω–∏—Ü—ã"})

    if calculate_constructor_score(current_data) < 90:
        recommendations.append({"factor": "–£–ª—É—á—à–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", "improvement": "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, —Ä–∞—Å—à–∏—Ä–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "position_change": "–†–æ—Å—Ç CTR", "revenue_change": "–ë–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è –∏ –ø—Ä–æ–¥–∞–∂", "cost": "–æ—Ç 5,000‚ÇΩ (–∫–æ–Ω—Ç–µ–Ω—Ç)"})

    if current_data.get("product_rating", 0) < 4.8:
        recommendations.append({"factor": "–ü–æ–¥–Ω—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", "improvement": f"–° {current_data.get('product_rating', 0):.1f} –¥–æ 4.8+ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç—É —Å –æ—Ç–∑—ã–≤–∞–º–∏", "position_change": "–í—ã—à–µ –≤ –ø–æ–∏—Å–∫–µ", "revenue_change": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", "cost": "–æ—Ç 10,000‚ÇΩ (—Å–µ—Ä–≤–∏—Å—ã/–∫–∞—á–µ—Å—Ç–≤–æ)"})

    if current_data.get("proceeds", 0) < 50000:
        recommendations.append({"factor": "–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏", "improvement": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ä–µ–∫–ª–∞–º—É (–ø–æ–∏—Å–∫/–∫–∞—Ç–∞–ª–æ–≥)", "position_change": "–†–µ–∑–∫–∏–π —Ä–æ—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏", "revenue_change": "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–∞", "cost": "–æ—Ç 15,000‚ÇΩ (–±—é–¥–∂–µ—Ç)"})
    
    if current_data.get("delivery_efficiency_wh_avg_pos", 100) > 48:
         recommendations.append({"factor": "–£—Å–∫–æ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", "improvement": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–∫–ª–∞–¥–∞–º", "position_change": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –≤—ã–¥–∞—á–µ", "revenue_change": "–†–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ä–µ–≥–∏–æ–Ω–æ–≤", "cost": "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"})

    if not recommendations:
        recommendations.append({"factor": "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", "improvement": "–ù–∞–π—Ç–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ —É —Ç–æ–ø-5 –∏ –ø—Ä–µ–≤–∑–æ–π—Ç–∏ –∏—Ö", "position_change": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ", "revenue_change": "–û—Ç—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç —Ä—ã–Ω–∫–∞", "cost": "–í—Ä–µ–º—è –Ω–∞ –∞–Ω–∞–ª–∏–∑"})

    return recommendations[:4]


def get_full_report(city, search_query, product_id):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    try:
        product_details = get_product_details(product_id)
        if not product_details or "id" not in product_details:
            return None, None, None, f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        brand_id = product_details.get("brand", {}).get("id")
        brand_details = get_brand_details(brand_id) if brand_id else {}
        
        positions_data = get_warehouse_positions(product_id, search_query)
        city_pos_data = next((p for p in positions_data if p.get("city") == city), None)
        current_position = city_pos_data.get("position") if city_pos_data else None

        product_context = {"id": product_id, "expected_position": current_position, "wh_avg_position": product_details.get("wh_avg_position"), "brand": {"id": brand_id}}
        
        model_input_data = prepare_model_input(product_context, product_details, brand_details, city, search_query)
        if model_input_data.get("position") is None: model_input_data["position"] = 9999

        model_pos = st.session_state.model_pos
        model_proc = st.session_state.model_proc
        features = st.session_state.features
        
        product_df = pd.DataFrame([model_input_data])
        for feature in features:
            if feature not in product_df.columns: product_df[feature] = 0
        
        for col in ["city_of_search", "search_query", "category"]:
            if col in product_df.columns: product_df[col] = product_df[col].astype("category")

        base_position = np.expm1(model_pos.predict(product_df[features])[0])
        base_proceeds = model_proc.predict(product_df[features])[0]
        
        model_input_data["position_real"] = current_position
        return model_input_data, base_position, base_proceeds, None
    except Exception as e:
        return None, None, None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}"


# --- UI-—á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---
st.set_page_config(layout="wide", page_title="AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ WB", page_icon="ü§ñ")

st.title("ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è Wildberries")
st.markdown("**–ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if "analysis_complete" not in st.session_state:
    st.session_state.analysis_complete = False

with st.container():
    col1, col2, col3 = st.columns(3)
    with col1:
        product_id_input = st.text_input("–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (ID)", "32395071")
    with col2:
        search_query_input = st.text_input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", "—Ñ—É—Ç–±–æ–ª–∫–∞ –∂–µ–Ω—Å–∫–∞—è –±–µ–ª–∞—è")
    with col3:
        city_input = st.selectbox("–ì–æ—Ä–æ–¥", ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"])

if st.button("üöÄ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", type="primary", use_container_width=True):
    if not product_id_input.isdigit():
        st.error("–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
    else:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
            try:
                st.session_state.model_pos = joblib.load("models/position_model.pkl")
                st.session_state.model_proc = joblib.load("models/proceeds_model.pkl")
                st.session_state.features = joblib.load("models/feature_list.pkl")
                st.session_state.label_encoders = joblib.load("models/label_encoders.pkl")
            except FileNotFoundError:
                st.error("–§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –∏ –ª–µ–∂–∞—Ç –≤ –ø–∞–ø–∫–µ `models/`.")
                st.stop()
            
            current_data, base_pos, base_proc, error_message = get_full_report(city_input, search_query_input, int(product_id_input))

            if error_message:
                st.error(error_message)
                st.session_state.analysis_complete = False
            else:
                st.session_state.current_data = current_data
                st.session_state.base_pos = base_pos
                st.session_state.base_proc = base_proc
                st.session_state.analysis_complete = True
                st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if st.session_state.analysis_complete:
    current_data = st.session_state.current_data
    base_pos = st.session_state.base_pos
    base_proc = st.session_state.base_proc

    # --- –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò ---
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("üéØ –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è", f"{int(current_data['position_real'])}" if current_data.get('position_real') is not None else "–ù–µ –Ω–∞–π–¥–µ–Ω")
    col2.metric("üìä –§–∞–∫—Ç–æ—Ä–æ–≤ –æ—Ü–µ–Ω–µ–Ω–æ", f"{len(calculate_ranking_factors(current_data))} –∏–∑ 6")
    col3.metric("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏", f"{base_proc:,.0f}‚ÇΩ")
    col4.metric("üíµ –¶–µ–Ω–∞", f"{current_data.get('price', 0):,.0f}‚ÇΩ", f"-{current_data.get('discount', 0)}%" if current_data.get('discount') else None)

    st.divider()

    # --- –§–ê–ö–¢–û–†–´ –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–Ø ---
    col1, col2 = st.columns([1, 1])
    with col1:
        st.subheader("üìä –í–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é")
        st.caption("–û—Ü–µ–Ω–∫–∞ AI-–º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        try:
            with open("models/feature_importance.json", "r", encoding="utf-8") as f:
                tech_importances = json.load(f)
            
            factor_groups = {"–ü—Ä–æ–¥–∞–∂–∏ –∏ –æ–±–æ—Ä–æ—Ç": ["proceeds"], "–¶–µ–Ω–∞ –∏ —Å–∫–∏–¥–∫–∏": ["price", "discount"], "–î–æ—Å—Ç–∞–≤–∫–∞": ["delivery"], "–†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã": ["rating", "reviews"], "–ö–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏": ["images", "category", "query"], "–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ": ["quantity", "stock"], "–†–µ–∫–ª–∞–º–∞": ["cpm", "ad_"]}
            agg_importance = {group: sum(imp for feat, imp in tech_importances.items() if any(k in feat for k in keys)) for group, keys in factor_groups.items()}
            
            total_sum = sum(agg_importance.values())
            if total_sum > 0:
                df = pd.DataFrame([{"–§–∞–∫—Ç–æ—Ä": k, "–í–∞–∂–Ω–æ—Å—Ç—å (%)": v / total_sum * 100} for k, v in agg_importance.items() if v > 0]).sort_values("–í–∞–∂–Ω–æ—Å—Ç—å (%)")
                fig = px.bar(df, x='–í–∞–∂–Ω–æ—Å—Ç—å (%)', y='–§–∞–∫—Ç–æ—Ä', orientation="h", color='–í–∞–∂–Ω–æ—Å—Ç—å (%)', color_continuous_scale=px.colors.sequential.Blues, text='–í–∞–∂–Ω–æ—Å—Ç—å (%)')
                fig.update_layout(height=400, showlegend=False, xaxis_title=None, yaxis_title=None, margin=dict(l=0, r=0, t=0, b=0), xaxis_range=[0, df['–í–∞–∂–Ω–æ—Å—Ç—å (%)'].max() * 1.1])
                fig.update_traces(texttemplate="%{text:.1f}%", textposition="outside")
                st.plotly_chart(fig, use_container_width=True)
        except Exception:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤.")

    with col2:
        st.subheader("üéØ –û—Ü–µ–Ω–∫–∞ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
        st.caption("–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞–∂–¥—ã–π —Ñ–∞–∫—Ç–æ—Ä (0-100%)")
        factors_data = calculate_ranking_factors(current_data)
        display_factors = ["–ü—Ä–æ–¥–∞–∂–∏ –∏ –æ–±–æ—Ä–æ—Ç", "–¶–µ–Ω–∞ –∏ —Å–∫–∏–¥–∫–∏", "–î–æ—Å—Ç–∞–≤–∫–∞", "–†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã", "–ö–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏", "–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ"]
        
        for factor in display_factors:
            value_int = int(factors_data.get(factor, 0))
            
            color = "üü¢" if value_int >= 75 else "üü°" if value_int >= 40 else "üî¥"
            st.markdown(f"{color} **{factor}**")
            
            st.progress(value_int / 100)
            
            st.markdown(
                f"<div style='text-align: right; margin-top: -30px; margin-bottom: 10px; font-weight: 500;'><small>{value_int}%</small></div>",
                unsafe_allow_html=True
            )

    st.divider()

    # --- –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ---
    st.subheader("üí° –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    recommendations = generate_optimization_recommendations(current_data)
    rec_df = pd.DataFrame(recommendations).rename(columns={"factor": "–î–ï–ô–°–¢–í–ò–ï", "improvement": "–ò–ó–ú–ï–ù–ï–ù–ò–ï", "position_change": "–≠–§–§–ï–ö–¢ –ù–ê –ü–û–ó–ò–¶–ò–ò", "revenue_change": "–≠–§–§–ï–ö–¢ –ù–ê –ü–†–û–î–ê–ñ–ò", "cost": "–°–¢–û–ò–ú–û–°–¢–¨"})
    st.dataframe(rec_df, use_container_width=True, hide_index=True)

    st.divider()

    # --- –°–ò–ú–£–õ–Ø–¢–û–† –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    st.subheader("üîß –°–∏–º—É–ª—è—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    col1, col2 = st.columns([2, 1])
    with col1:
        st.markdown("**–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏:**")
        sim_price = st.slider("–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞, ‚ÇΩ", int(current_data.get("price", 1000) * 0.7), int(current_data.get("price", 1000) * 1.3), int(current_data.get("price", 1000)), key="sim_price")
        sim_discount = st.slider("–°–∫–∏–¥–∫–∞, %", 0, 95, int(current_data.get("discount", 10)), key="sim_discount")
        sim_rating = st.slider("–†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞", 1.0, 5.0, float(current_data.get("product_rating", 4.5)), step=0.1, key="sim_rating")
        sim_images = st.slider("–ö–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 1, 15, int(current_data.get("images_count", 5)), key="sim_images")
        sim_proceeds_boost = st.slider("–£—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ (—Ä–µ–∫–ª–∞–º–∞), %", 0, 200, 0, key="sim_proceeds_boost")
    with col2:
        st.markdown("**–ü—Ä–æ–≥–Ω–æ–∑ AI-–º–æ–¥–µ–ª–∏:**")
        try:
            sim_data = current_data.copy()
            sim_data.update({'price': sim_price, 'discount': sim_discount, 'product_rating': sim_rating, 'images_count': sim_images, 'proceeds': sim_data.get('proceeds', 0) * (1 + sim_proceeds_boost / 100), 'in_promo': sim_discount > 0})
            
            model_utils = WBRankingModel()
            model_utils.label_encoders = st.session_state.label_encoders
            processed_sim_data = model_utils.prepare_data_from_unified_dataset(pd.DataFrame([sim_data]))
            X_sim = model_utils.prepare_features_for_model(processed_sim_data)
            
            for feature in st.session_state.features:
                if feature not in X_sim.columns: X_sim[feature] = 0
            X_sim = X_sim[st.session_state.features]
            
            new_pos_sim = int(np.expm1(st.session_state.model_pos.predict(X_sim)[0]))
            new_revenue_sim = st.session_state.model_proc.predict(X_sim)[0]
            
            st.metric("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∑–∏—Ü–∏–∏", f"~ {new_pos_sim}", f"{new_pos_sim - int(base_pos):+} –º–µ—Å—Ç", delta_color="inverse")
            st.metric("–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏", f"{new_revenue_sim:,.0f} ‚ÇΩ", f"{new_revenue_sim - base_proc:+, .0f} ‚ÇΩ")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
